commit 3a4cab806c9dd2cc875445bfeea3fb54dbc80959
Author: Gawain Lynch <gawain.lynch@gmail.com>
Date:   Wed Apr 1 09:49:53 2015 +0100

    Add response trap for OAuth providers

diff --git a/lib/Hybrid/thirdparty/Facebook/base_facebook.php b/lib/Hybrid/thirdparty/Facebook/base_facebook.php
index b9d403e..9991334 100644
--- a/lib/Hybrid/thirdparty/Facebook/base_facebook.php
+++ b/lib/Hybrid/thirdparty/Facebook/base_facebook.php
@@ -171,6 +171,13 @@ abstract class BaseFacebook
   );
 
   /**
+   * The decoded response object.
+   *
+   * @var mixed
+   */
+  protected $response;
+
+  /**
    * The Application ID.
    *
    * @var string
@@ -452,6 +459,16 @@ abstract class BaseFacebook
   }
 
   /**
+   * Return the response object afer the fact
+   *
+   * @return mixed
+   */
+  public function getResponse()
+  {
+      return $this->response;
+  }
+
+  /**
    * Determines and returns the user access token, first using
    * the signed request if present, and then falling back on
    * the authorization code if present.  The intent is to
@@ -913,7 +930,7 @@ abstract class BaseFacebook
     }
     // @codeCoverageIgnoreEnd
 
-    return $result;
+    return $this->response = $result;
   }
 
   /**
diff --git a/lib/Hybrid/thirdparty/OAuth/OAuth1Client.php b/lib/Hybrid/thirdparty/OAuth/OAuth1Client.php
index 2f2894c..66304b6 100644
--- a/lib/Hybrid/thirdparty/OAuth/OAuth1Client.php
+++ b/lib/Hybrid/thirdparty/OAuth/OAuth1Client.php
@@ -2,7 +2,7 @@
 /**
 * HybridAuth
 * http://hybridauth.sourceforge.net | http://github.com/hybridauth/hybridauth
-* (c) 2009-2014, HybridAuth authors | http://hybridauth.sourceforge.net/licenses.html 
+* (c) 2009-2014, HybridAuth authors | http://hybridauth.sourceforge.net/licenses.html
 */
 
 // A service client for the OAuth 1/1.0a flow.
@@ -13,7 +13,7 @@ class OAuth1Client{
 	public $authenticate_url      = "";
 	public $request_token_url     = "";
 	public $access_token_url      = "";
-	
+
 	public $request_token_method  = "GET";
 	public $access_token_method   = "GET";
 
@@ -31,10 +31,11 @@ class OAuth1Client{
 
 	public $http_code             = "";
 	public $http_info             = "";
+	protected $response           = null;
 
-	/** 
+	/**
 	* OAuth client constructor
-	*/ 
+	*/
 	function __construct( $consumer_key, $consumer_secret, $oauth_token = null, $oauth_token_secret = null )
 	{
 		$this->sha1_method = new OAuthSignatureMethod_HMAC_SHA1();
@@ -43,14 +44,14 @@ class OAuth1Client{
 
 		if ( $oauth_token && $oauth_token_secret ){
 			$this->token = new OAuthConsumer( $oauth_token, $oauth_token_secret );
-		} 
+		}
 	}
 
-	/** 
+	/**
 	* Build authorize url
-	* 
-	* @return string 
-	*/ 
+	*
+	* @return string
+	*/
 	function authorizeUrl( $token, $extras =array() )
 	{
 		if ( is_array( $token ) ){
@@ -68,28 +69,28 @@ class OAuth1Client{
 
 	/**
 	* Get a request_token from provider
-	* 
-	* @return array a key/value array containing oauth_token and oauth_token_secret 
+	*
+	* @return array a key/value array containing oauth_token and oauth_token_secret
 	*/
 	function requestToken( $callback = null )
 	{
-		$parameters = array(); 
+		$parameters = array();
 
 		if ( $callback ) {
-			$this->redirect_uri = $parameters['oauth_callback'] = $callback; 
+			$this->redirect_uri = $parameters['oauth_callback'] = $callback;
 		}
 
-		$request     = $this->signedRequest( $this->request_token_url, $this->request_token_method, $parameters ); 
+		$request     = $this->signedRequest( $this->request_token_url, $this->request_token_method, $parameters );
 		$token       = OAuthUtil::parse_parameters( $request );
-		$this->token = new OAuthConsumer( $token['oauth_token'], $token['oauth_token_secret'] ); 
+		$this->token = new OAuthConsumer( $token['oauth_token'], $token['oauth_token_secret'] );
 
-		return $token; 
-	} 
+		return $token;
+	}
 
-	/** 
-	* Exchange the request token and secret for an access token and secret, to sign API calls. 
-	* 
-	* @return array array('oauth_token' => the access token, 'oauth_token_secret' => the access secret) 
+	/**
+	* Exchange the request token and secret for an access token and secret, to sign API calls.
+	*
+	* @return array array('oauth_token' => the access token, 'oauth_token_secret' => the access secret)
 	*/
 	function accessToken( $oauth_verifier = false, $oauth_token = false )
 	{
@@ -97,25 +98,25 @@ class OAuth1Client{
 
 		// 1.0a
 		if ( $oauth_verifier ) {
-			$parameters['oauth_verifier'] = $oauth_verifier; 
+			$parameters['oauth_verifier'] = $oauth_verifier;
 		}
 
-		$request     = $this->signedRequest( $this->access_token_url, $this->access_token_method, $parameters ); 
-		$token       = OAuthUtil::parse_parameters( $request ); 
-		$this->token = new OAuthConsumer( $token['oauth_token'], $token['oauth_token_secret'] ); 
+		$request     = $this->signedRequest( $this->access_token_url, $this->access_token_method, $parameters );
+		$token       = OAuthUtil::parse_parameters( $request );
+		$this->token = new OAuthConsumer( $token['oauth_token'], $token['oauth_token_secret'] );
 
 		return $token;
 	}
 
-	/** 
+	/**
 	* GET wrapper for provider apis request
 	*/
 	function get($url, $parameters = array(), $content_type = NULL)
 	{
 		return $this->api($url, 'GET', $parameters, NULL, $content_type);
-	} 
+	}
 
-	/** 
+	/**
 	* POST wrapper for provider apis request
 	*/
 	function post($url, $parameters = array(), $body = NULL, $content_type = NULL, $multipart = false)
@@ -123,9 +124,9 @@ class OAuth1Client{
 		return $this->api($url, 'POST', $parameters, $body, $content_type, $multipart );
 	}
 
-	/** 
-	* Format and sign an oauth for provider api 
-	*/ 
+	/**
+	* Format and sign an oauth for provider api
+	*/
 	function api( $url, $method = 'GET', $parameters = array(), $body = NULL, $content_type = NULL, $multipart = false )
 	{
 		if ( strrpos($url, 'http://') !== 0 && strrpos($url, 'https://') !== 0 ) {
@@ -138,12 +139,22 @@ class OAuth1Client{
 			$response = json_decode( $response );
 		}
 
-		return $response; 
-	} 
+		return $this->response = $response;
+	}
 
-	/** 
-	* Make signed request  
-	*/ 
+	/**
+	 * Return the response object afer the fact
+	 *
+	 * @return mixed
+	 */
+	public function getResponse()
+	{
+	    return $this->response;
+	}
+
+	/**
+	* Make signed request
+	*/
 	function signedRequest( $url, $method, $parameters, $body = NULL, $content_type = NULL, $multipart = false )
 	{
 
@@ -167,14 +178,14 @@ class OAuth1Client{
 			return $this->request( $request->get_normalized_http_url(), $method, ($multipart ? $parameters : $request->to_postdata()), $request->to_header(), $content_type, $multipart ) ;
 		}
 	}
-	
-	/** 
-	* Make http request  
-	*/ 
+
+	/**
+	* Make http request
+	*/
 	function request( $url, $method, $postfields = NULL, $auth_header = NULL, $content_type = NULL, $multipart = false )
 	{
 		Hybrid_Logger::info( "Enter OAuth1Client::request( $method, $url )" );
-		Hybrid_Logger::debug( "OAuth1Client::request(). dump post fields: ", serialize( $postfields ) ); 
+		Hybrid_Logger::debug( "OAuth1Client::request(). dump post fields: ", serialize( $postfields ) );
 
 		$this->http_info = array();
 		$ci = curl_init();
@@ -194,11 +205,11 @@ class OAuth1Client{
 
         }elseif ($content_type)
 			curl_setopt( $ci, CURLOPT_HTTPHEADER, array('Expect:', "Content-Type: $content_type") );
-		
+
 		if($this->curl_proxy){
 			curl_setopt( $ci, CURLOPT_PROXY        , $this->curl_proxy);
 		}
- 
+
 		switch ($method){
 			case 'POST':
 				curl_setopt( $ci, CURLOPT_POST, TRUE );
@@ -233,7 +244,7 @@ class OAuth1Client{
 
 		curl_close ($ci);
 
-		return $response; 
+		return $response;
 	}
 
 	/**
@@ -249,5 +260,5 @@ class OAuth1Client{
 		}
 
 		return strlen($header);
-	} 
-} 
+	}
+}
diff --git a/lib/Hybrid/thirdparty/OAuth/OAuth2Client.php b/lib/Hybrid/thirdparty/OAuth/OAuth2Client.php
index ebc3ace..bc703bc 100644
--- a/lib/Hybrid/thirdparty/OAuth/OAuth2Client.php
+++ b/lib/Hybrid/thirdparty/OAuth/OAuth2Client.php
@@ -34,12 +34,13 @@ class OAuth2Client
 	public $curl_header              = array();
 	public $curl_useragent           = "OAuth/2 Simple PHP Client v0.1; HybridAuth http://hybridauth.sourceforge.net/";
 	public $curl_authenticate_method = "POST";
-        public $curl_proxy               = null;
+	public $curl_proxy               = null;
 
 	//--
 
 	public $http_code             = "";
 	public $http_info             = "";
+	protected $response           = null;
 
 	//--
 
@@ -140,10 +141,20 @@ class OAuth2Client
 		}
 
 		if( $response && $this->decode_json ){
-			$response = json_decode( $response );
+			$this->response = json_decode( $response );
 		}
 
-		return $response;
+		return $this->response = $response;
+	}
+
+	/**
+	 * Return the response object afer the fact
+	 *
+	 * @return mixed
+	 */
+	public function getResponse()
+	{
+	    return $this->response;
 	}
 
 	/**
